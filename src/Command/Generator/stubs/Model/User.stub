<?php

declare (strict_types=1);
namespace App\Model\%MODULE%;

use Hyperf\Database\Model\Relations\BelongsTo;
use Hyperf\ModelCache\Cacheable;
use HyperfExt\Auth\Authenticatable;
use HyperfExt\Auth\Contracts\AuthenticatableInterface;
use HyperfExt\Hashing\Hash;
use HyperfExt\Jwt\Contracts\JwtSubjectInterface;

/**
 * @property int $id 
 * @property int $role_id 所属角色
 * @property string $name 姓名
 * @property string $email 邮件
 * @property string $password 密码
 * @property string $remark 用户说明
 * @property int $status 状态
 * @property \Carbon\Carbon $created_at 
 * @property \Carbon\Carbon $updated_at
 * @property ManageRole $role
 */
class User extends Model implements AuthenticatableInterface ,JwtSubjectInterface
{
    use Authenticatable, Cacheable;
    /**
     * The table associated with the model.
     *
     * @var string
     */
    protected $table = '%SMODULE%_users';
    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = ['role_id', 'name', 'email', 'password', 'remark', 'status', 'created_at', 'updated_at'];
    /**
     * The attributes that should be cast to native types.
     *
     * @var array
     */
    protected $casts = ['id' => 'integer', 'role_id' => 'integer', 'status' => 'integer', 'created_at' => 'datetime', 'updated_at' => 'datetime'];

    /**
     * @var string[]
     */
    protected $hidden = ['password'];
    /**
     * @return BelongsTo
     */
    public function role(){
        return $this->belongsTo(Role::class);
    }
    /**
     * @return string
     */
    public function getPasswordField(): string
    {
        return 'password';
    }

    /**
     * @param string $string
     * @return string
     */
    public function getPasswordHash(string $string): string
    {
        return md5($string);
    }

    /**
     * @return \Hyperf\Utils\HigherOrderTapProxy|mixed|void
     */
    public function getJwtIdentifier()
    {
        return $this->getKey();
    }

    /**
     * @return string[]
     */
    public function getJwtCustomClaims(): array
    {
        return [
            'guard' => '%SMODULE%_api'    // 添加一个自定义载荷保存守护名称，方便后续判断
        ];
    }

    /**
     * @return ManageMenu[]|\Hyperf\Database\Model\Collection
     */
    public function getMenus(){
        if($this->getAttribute('role_id') === null){
            return Menu::all();
        }else{
            return $this->role->menus;
        }
    }

    /**
     * @param string $value
     * @return void
     */
    public function setPasswordAttribute(string $value){
        $this->attributes['password'] = Hash::make($value);
    }

    /**
     * @return bool
     */
    public function isOpen(){
        return $this->attributes['status'] === 1;
    }
}