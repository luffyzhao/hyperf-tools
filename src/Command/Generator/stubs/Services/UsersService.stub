<?php

declare(strict_types=1);

namespace App\Services\%MODULE%;

use App\Mail\%MODULE%\SendUserPassword;
use App\Model\%MODULE%\User;
use Hyperf\Database\Model\Builder;
use Hyperf\Database\Model\Model;
use Hyperf\Utils\Str;
use HyperfExt\Mail\Mail;
use LHyperfTools\Services\ServiceAbstract;

class UsersService extends ServiceAbstract
{
    /**
     * @var User
     */
    private $user;

    /**
     * @param User $user
     */
    public function __construct(User $user)
    {
        $this->user = $user;
    }

    /**
     * @param array $attributes
     * @return Model|Builder
     */
    public function create(array $attributes = []): Model|Builder
    {
        $attributes['password'] = $password = Str::random(12);
        $model = parent::create($attributes);
        Mail::to($model->getAttribute('email'))->queue(new SendUserPassword($password));
        return $model;
    }

    /**
     * @param $id
     * @param array $values
     * @return bool
     * @throws \Throwable
     */
    public function update($id, array $values): bool
    {
        return parent::update($id, $values); // TODO: Change the autogenerated stub
    }

    /**
     * @param $id
     * @param $password
     * @return User
     */
    public function password($id, $password = null)
    {
        /** @var User $model */
        $model = $this->find($id);
        if($password === null){
            $password = Str::random(12);
        }
        $model->setAttribute('password' , $password);
        $model->saveOrFail();
        Mail::to($model->getAttribute('email'))->queue(new SendUserPassword($password));
        return $model;
    }

    /**
     * @return Builder
     */
    protected function getNewQuery(): Builder
    {
        return $this->user->newQuery();
    }
}
