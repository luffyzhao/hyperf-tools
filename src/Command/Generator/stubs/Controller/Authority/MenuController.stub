<?php

declare(strict_types=1);

namespace App\Controller\%MODULE%\Authority;

use App\Repositories\%MODULE%\MenusRepository;
use Hyperf\HttpServer\Annotation\Controller;
use Hyperf\HttpServer\Annotation\DeleteMapping;
use Hyperf\HttpServer\Annotation\GetMapping;
use Hyperf\HttpServer\Annotation\PostMapping;
use Hyperf\HttpServer\Annotation\PutMapping;
use LHyperfTools\Traits\ApiResponseTrait;
use App\Request\%MODULE%\Authority\Menu\UpdateRequest;
use App\Request\%MODULE%\Authority\Menu\StoreRequest;

use App\Middleware\%MODULE%\RBACAuthMiddleware;
use LHyperfTools\Middleware\RefreshTokenMiddleware;
use Hyperf\HttpServer\Annotation\Middlewares;
use Hyperf\HttpServer\Annotation\Middleware;

/**
 * @Controller(prefix="%SMODULE%/api/authorities/menu")
 * @Middlewares({
 *      @Middleware(RefreshTokenMiddleware::class),
 *      @Middleware(RBACAuthMiddleware::class)
 *     })
 */
class MenuController
{
    use ApiResponseTrait;

    /**
     * @GetMapping(path="")
     * @return \Psr\Http\Message\ResponseInterface
     */
    public function index(MenusRepository $repository)
    {
        return $this->success(
            $repository->index()
        );
    }

    /**
     * @GetMapping(path="{id}/edit")
     * @param MenusRepository $repository
     * @param $id
     * @return \Psr\Http\Message\ResponseInterface
     */
    public function edit(MenusRepository $repository, $id){
        return $this->success(
            $repository->edit($id)
        );
    }

    /**
     * @PutMapping(path="{id}")
     * @param MenusRepository $repository
     * @param UpdateRequest $request
     * @param $id
     * @return \Psr\Http\Message\ResponseInterface
     */
    public function update(MenusRepository $repository, UpdateRequest $request, $id){
        return $this->success(
            $repository->update($id, $request->inputs(['name', 'title', 'sort', 'icon', 'authorities', 'description']))
        );
    }

    /**
     * @DeleteMapping(path="{ids}")
     * @return \Psr\Http\Message\ResponseInterface
     */
    public function delete(MenusRepository $repository, $ids){
        return $this->success(
            $repository->delete($ids)
        );
    }

    /**
     * @GetMapping(path="create")
     * @param MenusRepository $repository
     * @param StoreRequest $request
     * @return \Psr\Http\Message\ResponseInterface
     */
    public function create(MenusRepository $repository): \Psr\Http\Message\ResponseInterface
    {
        return $this->success(
            $repository->create()
        );
    }

    /**
     * @PostMapping(path="")
     * @param MenusRepository $repository
     * @param StoreRequest $request
     * @return \Psr\Http\Message\ResponseInterface
     */
    public function store(MenusRepository $repository, StoreRequest $request): \Psr\Http\Message\ResponseInterface
    {
        return $this->success(
            $repository->store($request->inputs(['name', 'title', 'sort', 'icon', 'authorities', 'description', 'parent_id']))
        );
    }
}
