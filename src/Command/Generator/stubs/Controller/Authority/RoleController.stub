<?php

declare(strict_types=1);

namespace App\Controller\%MODULE%\Authority;

use App\Middleware\%MODULE%\RBACAuthMiddleware;
use LHyperfTools\Middleware\RefreshTokenMiddleware;
use Hyperf\HttpServer\Annotation\Middlewares;
use Hyperf\HttpServer\Annotation\Middleware;

use App\Repositories\%MODULE%\RolesRepository;
use App\Request\%MODULE%\Authority\Role\StoreRequest;
use App\Request\%MODULE%\Authority\Role\UpdateRequest;
use App\Search\%MODULE%\Authority\RoleSearch;

use Hyperf\HttpServer\Annotation\Controller;
use Hyperf\HttpServer\Annotation\DeleteMapping;
use Hyperf\HttpServer\Annotation\GetMapping;
use Hyperf\HttpServer\Annotation\PostMapping;
use Hyperf\HttpServer\Annotation\PutMapping;
use LHyperfTools\Traits\ApiResponseTrait;

/**
 * @Controller(prefix="%SMODULE%/api/authorities/role")
 * @Middlewares({
 *      @Middleware(RefreshTokenMiddleware::class),
 *      @Middleware(RBACAuthMiddleware::class)
 *     })
 */
class RoleController
{
    use ApiResponseTrait;

    /**
     * @GetMapping(path="")
     * @return \Psr\Http\Message\ResponseInterface
     */
    public function index(RoleSearch $search, RolesRepository $repository)
    {
        return $this->success(
            $repository->index($search)
        );
    }

    /**
     * @GetMapping(path="create")
     * @return \Psr\Http\Message\ResponseInterface
     */
    public function create(RolesRepository $repository)
    {
        return $this->success(
            $repository->create()
        );
    }

    /**
     * @PostMapping(path="")
     * @param StoreRequest $request
     * @param RolesRepository $repository
     * @return \Psr\Http\Message\ResponseInterface
     */
    public function store(StoreRequest $request, RolesRepository $repository){
        $request->validated();

        return $this->success(
            $repository->store($request->inputs([
                'name','description','authorities','menus',
            ]))
        );
    }

    /**
     * @GetMapping(path="{id}/edit")
     * @param RolesRepository $repository
     * @param $id
     * @return \Psr\Http\Message\ResponseInterface
     */
    public function edit(RolesRepository $repository, $id){
        return $this->success(
            $repository->edit($id)
        );
    }

    /**
     * @PutMapping(path="{id}")
     * @param UpdateRequest $request
     * @param RolesRepository $repository
     * @param $id
     * @return \Psr\Http\Message\ResponseInterface
     */
    public function update(UpdateRequest $request, RolesRepository $repository, $id){
        $request->validated();

        return $this->success(
            $repository->update($id, $request->inputs([
                'name','description','authorities','menus',
            ]))
        );
    }

    /**
     * @DeleteMapping(path="{id}")
     * @param RolesRepository $repository
     * @param $id
     * @return \Psr\Http\Message\ResponseInterface
     * @throws \Throwable
     */
    public function delete(RolesRepository $repository, $id){
        return $this->success(
            $repository->delete($id)
        );
    }
}
